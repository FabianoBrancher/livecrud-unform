{"ast":null,"code":"import _slicedToArray from \"/media/fabiano/ec991e3e-83fb-4e35-a728-0dab4543d75d/RocketSeat/livecrud/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/media/fabiano/ec991e3e-83fb-4e35-a728-0dab4543d75d/RocketSeat/livecrud/frontend/src/pages/UserForm/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Form, Input, Scope } from 'unform';\nimport * as Yup from 'yup';\nimport api from '../../services/api';\nconst schema = Yup.object().shape({\n  name: Yup.string().required('Nome obrigatório')\n});\nexport default function UserForm({\n  history,\n  match\n}) {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  async function handleSubmit(data) {\n    await api.post('/users', match.params.id, data); // await api.postOrPut('/users', match.params.id, data)\n\n    history.push('/users');\n  }\n\n  useEffect(() => {\n    async function loadData() {\n      console.log(data);\n      const id = match.params.id;\n      const response = await api.get(\"/users/\".concat(id));\n      setData(response.data);\n    } // só é executado se o match.params.id existir, \n    // ou seja na criação não irá executar, apenas edição\n\n\n    if (match.params.id) {\n      loadData();\n    }\n  }, [match.params, match.params.id]);\n  return React.createElement(Form, {\n    schema: schema,\n    initialData: data,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Input, {\n    name: \"name\",\n    label: \"Nome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(Input, {\n    name: \"email\",\n    label: \"E-mail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Enviar\"));\n}","map":{"version":3,"sources":["/media/fabiano/ec991e3e-83fb-4e35-a728-0dab4543d75d/RocketSeat/livecrud/frontend/src/pages/UserForm/index.js"],"names":["React","useState","useEffect","Form","Input","Scope","Yup","api","schema","object","shape","name","string","required","UserForm","history","match","data","setData","handleSubmit","post","params","id","push","loadData","console","log","response","get"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,QAAmC,QAAnC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,EAAAA,IAAI,EAAEL,GAAG,CAACM,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB;AADwB,CAAnB,CAAf;AAIA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAlB,EAAsC;AAAA,oBACzBf,QAAQ,CAAC,EAAD,CADiB;AAAA;AAAA,QAC1CgB,IAD0C;AAAA,QACpCC,OADoC;;AAGjD,iBAAeC,YAAf,CAA4BF,IAA5B,EAAkC;AAC9B,UAAMV,GAAG,CAACa,IAAJ,CAAS,QAAT,EAAmBJ,KAAK,CAACK,MAAN,CAAaC,EAAhC,EAAoCL,IAApC,CAAN,CAD8B,CAE9B;;AAEAF,IAAAA,OAAO,CAACQ,IAAR,CAAa,QAAb;AACH;;AAEDrB,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAesB,QAAf,GAA0B;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AADsB,YAEdK,EAFc,GAEPN,KAAK,CAACK,MAFC,CAEdC,EAFc;AAGtB,YAAMK,QAAQ,GAAG,MAAMpB,GAAG,CAACqB,GAAJ,kBAAkBN,EAAlB,EAAvB;AAEAJ,MAAAA,OAAO,CAACS,QAAQ,CAACV,IAAV,CAAP;AACH,KAPW,CAQZ;AACA;;;AACA,QAAID,KAAK,CAACK,MAAN,CAAaC,EAAjB,EAAqB;AACjBE,MAAAA,QAAQ;AACX;AACJ,GAbQ,EAaN,CAACR,KAAK,CAACK,MAAP,EAAeL,KAAK,CAACK,MAAN,CAAaC,EAA5B,CAbM,CAAT;AAeA,SACI,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAEd,MAAd;AAAsB,IAAA,WAAW,EAAES,IAAnC;AAAyC,IAAA,QAAQ,EAAEE,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,KAAK,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,CADJ;AAaH","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Form, Input, Scope } from 'unform'\nimport * as Yup from 'yup'\nimport api from '../../services/api'\n\nconst schema = Yup.object().shape({\n    name: Yup.string().required('Nome obrigatório')\n})\n\nexport default function UserForm({ history, match }) {\n    const [data, setData] = useState({})\n\n    async function handleSubmit(data) {\n        await api.post('/users', match.params.id, data)\n        // await api.postOrPut('/users', match.params.id, data)\n\n        history.push('/users')\n    }   \n\n    useEffect(() => {\n        async function loadData() {\n            console.log(data)\n            const { id } = match.params\n            const response = await api.get(`/users/${id}`)\n\n            setData(response.data)\n        }\n        // só é executado se o match.params.id existir, \n        // ou seja na criação não irá executar, apenas edição\n        if (match.params.id) {\n            loadData()\n        }\n    }, [match.params, match.params.id])\n\n    return (\n        <Form schema={schema} initialData={data} onSubmit={handleSubmit}>\n            <Input name=\"name\" label=\"Nome\" />\n            <Input name=\"email\" label=\"E-mail\" />\n            \n            {/* <Scope path=\"address\">\n                <Input name=\"street\" label=\"Rua\" />\n                <Input name=\"number\" label=\"número\" />\n            </Scope> */}\n\n            <button type=\"submit\">Enviar</button>\n        </Form>\n    )\n}"]},"metadata":{},"sourceType":"module"}